apply plugin: 'java'
apply plugin: "maven"
apply plugin: "signing"

jar.baseName = "laputapp-http"
group = "com.laputapp"
version = "1.0.4"

// load properties file
def Properties props = new Properties()
props.load(new FileInputStream(file("../local.properties")))
// extract Android SDK dir
def android = [
    sdk: props["sdk.dir"],
    target: "android-22"
]

compileJava {
  sourceCompatibility = JavaVersion.VERSION_1_7
  targetCompatibility = JavaVersion.VERSION_1_7
}

task generateJavadoc(type: Javadoc) {
  source = sourceSets.main.allJava
  exclude "**/internal/**"
  title = "Laputapp Http"
  options.windowTitle = "Laputapp Http"
  options.linksOffline("http://developer.android.com/reference", "${android.sdk}/docs/reference")
  classpath = files("${android.sdk}/platforms/${android.target}/android.jar", "${android.sdk}/tools/support/annotations.jar")
  options.noDeprecated = true
  options.noHelp = true
  options.noIndex = true
  options.noTree = true
  options.stylesheetFile = file('./javadoc_stylesheet.css')
}

task javadocJar(type: Jar, dependsOn: generateJavadoc) {
  classifier = "javadoc"
  baseName = jar.baseName
  from javadoc.destinationDir
}

task sourcesJar(type: Jar, dependsOn: classes) {
  classifier = "sources"
  baseName = jar.baseName
  from sourceSets.main.allSource
}

artifacts {
  archives jar
  archives sourcesJar
  archives javadocJar
}

dependencies {
  compile files("${android.sdk}/platforms/${android.target}/android.jar")

  compile libs.okhttp
  compile libs.okhttpurlconnection
  compile libs.retrofit
}

signing {
  sign configurations.archives
}

def isReleaseBuild() {
  return VERSION_NAME.contains("SNAPSHOT") == false
}

def getReleaseRepositoryUrl() {
  return hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL
      : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
}

def getSnapshotRepositoryUrl() {
  return hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL
      : "https://oss.sonatype.org/content/repositories/snapshots/"
}

def getRepositoryUsername() {
  return hasProperty('NEXUS_USERNAME') ? NEXUS_USERNAME : ""
}

def getRepositoryPassword() {
  return hasProperty('NEXUS_PASSWORD') ? NEXUS_PASSWORD : ""
}

uploadArchives {
  repositories {
    mavenDeployer {
      beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

      pom.groupId = GROUP
      pom.artifactId = POM_ARTIFACT_ID
      pom.version = VERSION_NAME

      repository(url: getReleaseRepositoryUrl()) {
        authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
      }
      snapshotRepository(url: getSnapshotRepositoryUrl()) {
        authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
      }

      pom.project {
        name POM_NAME
        packaging POM_PACKAGING
        description POM_DESCRIPTION
        url POM_URL

        scm {
          url POM_SCM_URL
          connection POM_SCM_CONNECTION
          developerConnection POM_SCM_DEV_CONNECTION
        }

        licenses {
          license {
            name POM_LICENCE_NAME
            url POM_LICENCE_URL
            distribution POM_LICENCE_DIST
          }
        }

        developers {
          developer {
            id POM_DEVELOPER_ID
            name POM_DEVELOPER_NAME
          }
        }
      }
    }
  }
}